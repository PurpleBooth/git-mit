on:
  push:
    tags-ignore:
      - versio-prev
jobs:
  build:
    runs-on: ${{ matrix.os }}
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
        with:
          lfs: true
      - uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
      - uses: actions-rs/toolchain@v1.0.7
        with:
          default: true
          profile: minimal
          toolchain: stable
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: --release --locked
          command: build
      - id: get_repository_name
        run:
          echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
          -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/mit-commit-msg$EXTENSION ./mit-commit-msg-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/git-mit-config$EXTENSION ./git-mit-config-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/mit-pre-commit$EXTENSION ./mit-pre-commit-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/mit-prepare-commit-msg$EXTENSION ./mit-prepare-commit-msg-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/git-mit$EXTENSION ./git-mit-$TARGET$EXTENSION
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: bins
          path: ./*${{ matrix.target }}${{ matrix.suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: bash_completion
          path: ./**/bash_completion/*
      - uses: actions/upload-artifact@v2
        with:
          name: fish_completion
          path: ./**/fish_completion/*
      - uses: actions/upload-artifact@v2
        with:
          name: zsh_completion
          path: ./**/zsh_completion/*
    strategy:
      matrix:
        include:
          - os: macos-latest
            suffix: ""
            target: x86_64-apple-darwin
            install: echo nothing to install
          - os: ubuntu-latest
            suffix: ""
            target: x86_64-unknown-linux-gnu
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev
          - os: windows-latest
            suffix: .exe
            target: x86_64-pc-windows-msvc
            install: echo nothing to install
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          lfs: true
          fetch-depth: 0
      - uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
      - uses: actions/download-artifact@v2
      - uses: actions-rs/toolchain@v1.0.7
        with:
          default: true
          profile: minimal
          toolchain: stable
      - id: get_previous_version
        run:
          echo ::set-output name=PREVIOUS_VERSION::$(git tag | sort --version-sort
          | tail -n 3 | head -n 1)
        shell: bash
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: toml-cli
          command: install
      - id: get_repository_name
        run:
          echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
          -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - id: get_version
        run:
          echo ::set-output name=VERSION::v$(toml get git-mit/Cargo.toml package.version
          | tail -c +2 | head -c -2)
        shell: bash
      - name: Build Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          fromTag: ${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}
          toTag: ${{ steps.get_version.outputs.VERSION }}
          commitMode: true
          ignorePreReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - env:
          GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
        id: create_release
        uses: ncipollo/release-action@v1.8.6
        with:
          allowUpdates: true
          token: ${{ secrets.COMMITTER_TOKEN }}
          body: ${{ steps.changelog.outputs.changelog }}
          name: Release ${{ steps.get_version.outputs.VERSION }}
          tag: ${{ steps.get_version.outputs.VERSION }}
          artifacts: ./bins/*,./bash_completion/**/*.bash,./fish_completion/**/*.fish,./zsh_completion/**/_*
