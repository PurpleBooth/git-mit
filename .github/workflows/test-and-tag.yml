on:
  push:
    branches:
      - "*"
  pull_request:
jobs:
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/audit-check@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  lint-markdown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: PurpleBooth/gfmfmt-action@v1.0.0
        with:
          path: '^./[A-Za-z_]+\.md$'
      - uses: PurpleBooth/gfmfmt-action@v1.0.0
        with:
          path: '^./docs/[A-Za-z_]+\.md$'
  version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - uses: chaaz/versio-actions/install@v1.1
        name: Install versio
      - name: Check projects
        run: versio check
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: check
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            install: echo nothing-to-install
          - os: ubuntu-latest
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev
          - os: windows-latest
            install: echo nothing-to-install
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: " --locked"
          command: test
  bench:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            install: echo nothing-to-install
          - os: ubuntu-latest
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev
          - os: windows-latest
            install: echo nothing-to-install
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: " --locked"
          command: bench
  specdown:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            specdown: https://github.com/specdown/specdown/releases/download/v0.41.0/specdown-x86_64-apple-darwin
            install: echo nothing-to-install
          - os: ubuntu-latest
            specdown: https://github.com/specdown/specdown/releases/download/v0.41.0/specdown-x86_64-unknown-linux-gnu
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE/target/assorted/bin"
          curl -Lo "$GITHUB_WORKSPACE/target/assorted/bin/specdown" "$SPECDOWN_URL"
          chmod +x "$GITHUB_WORKSPACE/target/assorted/bin/specdown"
          echo "$GITHUB_WORKSPACE/target/assorted/bin" >> "$GITHUB_PATH"
        env:
          SPECDOWN_URL: ${{ matrix.specdown }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - run: make specdown
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args:
            --all-targets --all-features -- -D warnings -Dclippy::all -D clippy::pedantic
            -D clippy::cargo -A clippy::multiple-crate-versions
      - name: Prettify code
        uses: creyD/prettier_action@v3.3
        with:
          prettier_options: --check **/*.{yml,yaml}
      - uses: gaurav-nelson/github-action-markdown-link-check@1.0.12
  merge-and-push:
    if: github.ref == 'refs/heads/main'
    needs:
      - version
      - specdown
      - test
      - lints
      - check
      - security-audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          token: ${{ secrets.COMMITTER_TOKEN }}
          fetch-depth: 0
      - uses: chaaz/versio-actions/install@v1.1
        name: Install versio
      - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
        id: get_versio_plan
        env:
          GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
      - name: Generate release
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        run: |
          versio release
        env:
          GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
          GITHUB_USER: ${{ github.actor }}
      - run: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev
      - name: Publish mit-build-tools to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-build-tools && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-hook-test-helper to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-hook-test-helper && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-commit-message-lints to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-commit-message-lints && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-commit-msg to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-commit-msg && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-pre-commit to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-pre-commit && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-prepare-commit-msg to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-prepare-commit-msg && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit-config to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit-config && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit-install to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit-install && cargo publish )

        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit-relates-to to Crates
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit-relates-to && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
