'on':
  push:
    branches:
      - '*'
  pull_request: null
jobs:
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*
      - id: get_previous_version
        run: echo ::set-output name=PREVIOUS_VERSION::$(git tag --sort=-creatordate | head -n 1)
        shell: bash
      - id: semvers
        uses: WyriHaximus/github-action-next-semvers@master
        with:
          version: '${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}'
      - run: mkdir -p ./version
      - if: "!contains(github.event.head_commit.message, 'BC BREAK') && !contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_minor }}
      - if: "contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_patch }}
      - run: echo "$VERSION" > ./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_major }}
        if: "contains(github.event.head_commit.message, 'BC BREAK')"
      - uses: actions/upload-artifact@v2
        with:
          name: version
          path: ./version/version
  generate-formula:
    needs:
      - version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - run: |
          curl -Lo file.tar.gz "https://github.com/$GIT_REPO/archive/$GIT_TAG.tar.gz"
          sha256sum -b file.tar.gz | awk '{ print $1 }' > hash
          echo ::set-output "name=SHA256::$( cat hash )"
          echo ::set-output "name=NEXT_VERSION::$( cat ./version/version )"
        id: hash
        shell: bash
        env:
          GIT_REPO: ${{ github.repository }}
          GIT_TAG: ${{ steps.hash.outputs.NEXT_VERSION }}
      - uses: cuchi/jinja2-action@v1.1.0
        with:
          template: homebrew/formula.rb.j2
          output_file: formula.rb
          variables: |
            github_repo=${{ github.repository }}
            git_tag=${{ steps.hash.outputs.NEXT_VERSION }}
            file_sha=${{ steps.hash.outputs.SHA256 }}
      - uses: actions/upload-artifact@v2
        with:
          name: formula
          path: ./formula.rb
      - uses: actions/upload-artifact@v2
        with:
          name: hash
          path: ./hash
  test-formula:
    needs:
      - generate-formula
    runs-on: macos-latest
    steps:
      - id: get_repository_name
        run: echo ::set-output "name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")"
        shell: bash
      - uses: actions/download-artifact@v2
      - uses: actions/checkout@v2
        with:
          repository: PurpleBooth/homebrew-repo
          token: ${{ secrets.COMMITTER_TOKEN }}
          path: homebrew-repo
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.COMMITTER_TOKEN }}
          path: source-repo
      - id: get-brew-cache
        run: |
          echo "::set-output name=dir::$(brew --cache)"
      - uses: actions/cache@v2
        with:
          path: ${{ steps.get-brew-cache.outputs.dir }}
          key: ${{ runner.os }}-brew-${{ hashFiles('**/formula.rb.j2') }}
      - shell: bash
        run: |
          set -euo pipefail
          FORMULA_LOCATION="homebrew-repo/Formula/$REPOSITORY_NAME.rb"

          if [ ! -f "$FORMULA_LOCATION" ] || ! grep -q "$(cat ./hash/hash)" "$FORMULA_LOCATION" ; then
            cp formula/formula.rb "homebrew-repo/Formula/$REPOSITORY_NAME.rb"
          fi

          mkdir -p "$(brew --repo)/Library/Taps/purplebooth"
          cp -r ./homebrew-repo/. "$(brew --repo)/Library/Taps/purplebooth/homebrew-repo"

          brew test-bot \
            --bintray-org="$BINTRAY_ORG" \
            --root-url="$BINTRAY_DL_URL" \
            --tap purplebooth/homebrew-repo \
            "purplebooth/repo/$REPOSITORY_NAME"
        env:
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
          BINTRAY_API_URL: https://api.bintray.com
          BINTRAY_DL_URL: https://dl.bintray.com/purplebooth/bottles-repo
          BINTRAY_ORG: purplebooth
          HOMEBREW_BINTRAY_USER: purplebooth
          HOMEBREW_BINTRAY_KEY: '${{ secrets.HOMEBREW_BINTRAY_KEY }}'
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: check
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          default: true
      - uses: actions-rs/cargo@v1
        with:
          args: " --locked"
          command: test
  mdtest:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          default: true
      - run: make mdtest
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          default: true
          components: 'rustfmt, clippy'
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: '--all -- --check'
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: '--all-targets --all-features -- -D warnings -Dclippy::style -D clippy::pedantic -D clippy::cargo'
  merge-and-push:
    if: contains( github.event.pull_request.labels.*.name, 'dependencies') || ( github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, 'Release v') )
    needs:
      - mdtest
      - test
      - lints
      - check
      - test-formula
      - version
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          default: true
      - uses: actions/checkout@v2
        with:
          token: '${{ secrets.COMMITTER_TOKEN }}'
          fetch-depth: 0
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/download-artifact@v2
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli'
      - shell: bash
        run: |
          for I in ./*/Cargo.toml ; do
            TEMP_FILE="$(mktemp)"
            toml set "$I" package.version "$(cat ./version/version | tail -c +2)" > "$TEMP_FILE"
            mv "$TEMP_FILE" "$I"
          done
      - uses: actions-rs/cargo@v1
        with:
          args: "--offline"
          command: generate-lockfile
      - shell: bash
        run: |
          git config user.name "GitHub"
          git config user.email "noreply@github.com"

          git fetch
      - shell: bash
        if: github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
        run: |
          git checkout master
          git merge --ff-only -
      - shell: bash
        run: |
          git commit -am "Release $(cat ./version/version)"
          git tag -a -m "Release $(cat ./version/version)" "$(cat ./version/version)"
          git pull --rebase
          git push
          git push --tags
