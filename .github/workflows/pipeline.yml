on:
  push:
    branches:
      - "*"
  pull_request:
jobs:
  docker-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Build and push
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          push: false
          cache-from: type=registry,ref=ghcr.io/purplebooth/git-mit:latest
          cache-to: type=inline
          tags: |
            ghcr.io/purplebooth/git-mit:git-${{ github.sha }}
            ghcr.io/purplebooth/git-mit:latest
  security-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/audit-check@v1.2.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
  lint-markdown:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: PurpleBooth/gfmfmt-action@v1.0.5
        with:
          pattern: ^./([A-Za-z_]+|docs/.*)\.md$
  version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - uses: chaaz/versio-actions/install@v1.1
      - run: versio check
      - run: versio release --dry-run
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: check
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            install: echo nothing-to-install
          - os: ubuntu-latest
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
          - os: windows-latest
            install: echo nothing-to-install
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: " --locked"
          command: test
  bench:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            install: echo nothing-to-install
          - os: ubuntu-latest
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
          - os: windows-latest
            install: echo nothing-to-install
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: " --locked"
          command: bench
  specdown:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            specdown: https://github.com/specdown/specdown/releases/latest/download/specdown-x86_64-pc-windows-msvc.exe
            install: echo nothing-to-install
          - os: macos-latest
            specdown: https://github.com/specdown/specdown/releases/download/v0.41.0/specdown-x86_64-apple-darwin
            install: echo nothing-to-install
          - os: ubuntu-latest
            specdown: https://github.com/specdown/specdown/releases/download/v0.41.0/specdown-x86_64-unknown-linux-gnu
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          set -euo pipefail
          mkdir -p "$GITHUB_WORKSPACE/target/assorted/bin"
          curl -Lo "$GITHUB_WORKSPACE/target/assorted/bin/specdown" "$SPECDOWN_URL"
          chmod +x "$GITHUB_WORKSPACE/target/assorted/bin/specdown"
          echo "$GITHUB_WORKSPACE/target/assorted/bin" >> "$GITHUB_PATH"
        env:
          SPECDOWN_URL: ${{ matrix.specdown }}
        shell: bash
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
      - name: Rename wsl bash
        if: runner.os == 'Windows'
        run: |
          takeown /F C:\Windows\System32\bash.exe
          icacls C:\Windows\System32\bash.exe /grant administrators:F
          ren C:\Windows\System32\bash.exe wsl-bash.exe
      - run: make specdown
        shell: bash
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1.0.7
        with:
          profile: minimal
          toolchain: stable
          default: true
          components: rustfmt, clippy
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: fmt
          args: --all -- --check
      - uses: actions-rs/cargo@v1.0.3
        with:
          command: clippy
          args:
            --all-targets --all-features -- -D warnings -Dclippy::all -D clippy::pedantic
            -D clippy::cargo -A clippy::multiple-crate-versions
      - uses: creyD/prettier_action@v3.3
        with:
          prettier_options: --check **/*.{yml,yaml}
      - uses: gaurav-nelson/github-action-markdown-link-check@1.0.13

  release:
    if: github.ref == 'refs/heads/main'
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_USER: ${{ github.actor }}
    needs:
      - docker-build
      - version
      - specdown
      - test
      - lints
      - lint-markdown
      - check
      - security-audit
    outputs:
      version_bump: ${{ steps.version_bump.outputs.version_bump }}
      current_version: ${{ steps.current_version.outputs.current_version }}
      previous_version: ${{ steps.previous_version.outputs.previous_version }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          fetch-depth: 0
      - uses: chaaz/versio-actions/install@v1.1
        name: Install versio
      - id: previous_version
        run: echo ::set-output "name=previous_version::$( versio get --id 1 -v )"
      - run: echo ::set-output "name=BUMP::$( versio release --dry-run )"
        id: get_versio_plan
      - name: Generate release
        if: ${{ contains(steps.get_versio_plan.outputs.BUMP, ' -> ') }}
        run: |
          versio release
      - run: echo ::set-output "name=current_version::$( versio get --id 1 -v )"
        id: current_version
      - run: echo ::set-output "name=version_bump::true"
        if: steps.current_version.outputs.current_version != steps.previous_version.outputs.previous_version
        id: version_bump

  cargo-publish:
    if: needs.release.outputs.version_bump
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        name: Checkout the repository
        with:
          ref: v${{ needs.release.outputs.current_version }}
      - run: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
      - name: Publish mit-build-tools to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-build-tools && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-hook-test-helper to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-hook-test-helper && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-commit-message-lints to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-commit-message-lints && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-commit-msg to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-commit-msg && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-pre-commit to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-pre-commit && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish mit-prepare-commit-msg to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd mit-prepare-commit-msg && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit-config to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit-config && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit-install to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit-install && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}
      - name: Publish git-mit-relates-to to Crates
        uses: nick-invision/retry@v2.4.1
        with:
          timeout_minutes: 30
          max_attempts: 10
          command: |
            cargo login "$CARGO_TOKEN"
            ( cd git-mit-relates-to && cargo publish )
        env:
          CARGO_TOKEN: ${{ secrets.CARGO_TOKEN }}

  build:
    if: needs.release.outputs.version_bump
    needs:
      - release
    runs-on: ${{ matrix.os }}
    steps:
      - run: ${{ matrix.install }}
        env:
          DEBIAN_FRONTEND: noninteractive
      - uses: actions/checkout@v2.3.4
        with:
          lfs: true
          ref: v${{ needs.release.outputs.current_version }}
      - uses: actions/cache@v2.1.6
        with:
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ~/.cargo/bin
            target
      - uses: actions-rs/toolchain@v1.0.7
        with:
          default: true
          profile: minimal
          toolchain: stable
      - uses: actions-rs/cargo@v1.0.3
        with:
          args: --release --locked
          command: build
      - id: get_repository_name
        run:
          echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk
          -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/mit-commit-msg$EXTENSION ./mit-commit-msg-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/git-mit-config$EXTENSION ./git-mit-config-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/mit-pre-commit$EXTENSION ./mit-pre-commit-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/mit-prepare-commit-msg$EXTENSION ./mit-prepare-commit-msg-$TARGET$EXTENSION
        shell: bash
      - name: Move binary to upload location
        env:
          TARGET: ${{ matrix.target }}
          EXTENSION: ${{ matrix.suffix }}
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
        run: mv ./target/release/git-mit$EXTENSION ./git-mit-$TARGET$EXTENSION
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: bins
          path: ./*${{ matrix.target }}${{ matrix.suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: bash_completion
          path: ./**/bash_completion/*
      - uses: actions/upload-artifact@v2
        with:
          name: fish_completion
          path: ./**/fish_completion/*
      - uses: actions/upload-artifact@v2
        with:
          name: zsh_completion
          path: ./**/zsh_completion/*
    strategy:
      matrix:
        include:
          - os: macos-latest
            suffix: ""
            target: x86_64-apple-darwin
            install: echo nothing to install
          - os: ubuntu-latest
            suffix: ""
            target: x86_64-unknown-linux-gnu
            install: sudo apt-get install -y libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev
          - os: windows-latest
            suffix: .exe
            target: x86_64-pc-windows-msvc
            install: echo nothing to install
  generate-github-release:
    if: needs.release.outputs.version_bump
    needs:
      - release
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.3.4
        with:
          lfs: true
          fetch-depth: 0
          ref: v${{ needs.release.outputs.current_version }}
      - uses: actions/download-artifact@v2
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v1
        with:
          config: cliff.toml
          args: --verbose --latest
        env:
          OUTPUT: CHANGELOG.md
      - id: create_release
        uses: ncipollo/release-action@v1.8.8
        with:
          allowUpdates: true
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: "CHANGELOG.md"
          name: Release v${{ needs.release.outputs.current_version }}
          tag: v${{ needs.release.outputs.current_version }}
          artifacts: ./bins/*,./bash_completion/**/*.bash,./fish_completion/**/*.fish,./zsh_completion/**/_*

  docker-push:
    if: needs.release.outputs.version_bump
    needs:
      - release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
        with:
          lfs: true
          fetch-depth: 0
          ref: v${{ needs.release.outputs.current_version }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1.10.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2.6.1
        with:
          context: .
          push: true
          cache-from: type=registry,ref=ghcr.io/purplebooth/git-mit:latest
          cache-to: type=inline
          tags: |
            ghcr.io/purplebooth/git-mit:v${{ needs.release.outputs.current_version }}
            ghcr.io/purplebooth/git-mit:latest

  generate-formula:
    if: needs.release.outputs.version_bump
    needs:
      - release
    name: Generate Homebrew Formula
    runs-on: ubuntu-latest
    steps:
      - id: get_repository_name
        name: Work out repository name
        run:
          echo ::set-output "name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" |
          awk -F / '{print $2}' | sed -e "s/:refs//")"
        shell: bash
      - uses: actions/checkout@v2.3.4
        name: Checkout this repository
        with:
          path: main-repo
          ref: v${{ needs.release.outputs.current_version }}
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3.2.0
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          workdir: main-repo
      - uses: actions/checkout@v2.3.4
        with:
          repository: PurpleBooth/homebrew-repo
          token: ${{ secrets.COMMITTER_TOKEN }}
          path: homebrew-repo
          ref: main
        name: Checkout the custom tap
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v3.2.0
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.GPG_PASSPHRASE }}
          git-user-signingkey: true
          git-commit-gpgsign: true
          git-tag-gpgsign: true
          workdir: homebrew-repo
      - run: |
          curl -Lo file.tar.gz "https://github.com/$GIT_REPO/archive/$GIT_TAG.tar.gz"
          sha256sum -b file.tar.gz | awk '{ print $1 }' > hash
          echo ::set-output "name=SHA256::$( cat hash )"
        id: hash
        shell: bash
        env:
          GIT_REPO: ${{ github.repository }}
          GIT_TAG: v${{ needs.release.outputs.current_version }}
        name: Calculate the binary hash
      - uses: cuchi/jinja2-action@v1.2.0
        with:
          template: main-repo/homebrew/formula.rb.j2
          output_file: formula.rb
          variables: |
            github_repo=${{ github.repository }}
            git_tag=v${{ needs.release.outputs.current_version }}
            file_sha=${{ steps.hash.outputs.SHA256 }}
        name: Generate the template
      - shell: bash
        name: Open a PR on the custom tap repository
        run: |
          VERSION="$(echo $GIT_TAG | sed 's/^refs\/tags\///')"
          git -C homebrew-repo switch -c "$REPOSITORY_NAME-$VERSION"
          cp formula.rb "homebrew-repo/Formula/$REPOSITORY_NAME.rb"
          git -C homebrew-repo add "Formula/$REPOSITORY_NAME.rb"
          git -C homebrew-repo commit -m "fix: Update $REPOSITORY_NAME to $VERSION"
          git -C homebrew-repo push origin "$REPOSITORY_NAME-$VERSION"
          (cd homebrew-repo && gh pr create --label releases --base main --fill)
        env:
          REPOSITORY_NAME: ${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}
          GIT_TAG: v${{ needs.release.outputs.current_version }}
          GITHUB_TOKEN: ${{ secrets.COMMITTER_TOKEN }}
