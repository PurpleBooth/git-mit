'on':
  push:
    branches:
      - 'master'
jobs:
  test:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
          - os: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: 'rustfmt, clippy'
          default: true
      - run: make fmt test smoke-test
  lints:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: 'rustfmt, clippy'
          default: true
      - run: make fmt lint
  version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - run: git fetch --unshallow --tags
      - id: get_previous_version
        run: |
          echo ::set-output name=PREVIOUS_VERSION::$(git describe --tags "$(git rev-list --tags --max-count=1)")

          MESSAGES="$(git log "$(git describe --tags --abbrev=0)"..HEAD --pretty=format:"%B" )"
          MESSAGES="${MESSAGES//'%'/'%25'}"
          MESSAGES="${MESSAGES//$'\n'/'%0A'}"
          MESSAGES="${MESSAGES//$'\r'/'%0D'}"

          echo ::set-output name=MESSAGES::"$MESSAGES"
        shell: bash
      - id: semvers
        uses: WyriHaximus/github-action-next-semvers@master
        with:
          version: '${{ steps.get_previous_version.outputs.PREVIOUS_VERSION }}'
      - run: mkdir -p ./version
      - if: "!contains(steps.get_previous_version.outputs.MESSAGES, 'BC BREAK') && !contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_minor }}
      - if: "contains(github.event.head_commit.message, 'Signed-off-by: dependabot-preview[bot] <support@dependabot.com>')"
        run: echo "$VERSION" >./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_patch }}
      - run: echo "$VERSION" > ./version/version
        env:
          VERSION: ${{ steps.semvers.outputs.v_major }}
        if: "contains(steps.get_previous_version.outputs.MESSAGES, 'BC BREAK')"
      - uses: actions/upload-artifact@v2
        with:
          name: version
          path: ./version/version
  build:
    needs:
      - version
      - lints
      - test
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            suffix: ''
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            suffix: ''
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@v2
      - id: get_version
        run: 'echo ::set-output "name=VERSION::$(cat ./version/version)"'
        shell: bash
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: 'rustfmt, clippy'
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli'
      - shell: bash
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
          REPOSITORY_NAME: '${{ steps.get_repository_name.outputs.REPOSITORY_NAME }}'
        run: |
          for I in ./*/Cargo.toml ; do
            TEMP_FILE="$(mktemp)"
            toml set "$I" package.version "${VERSION:1}" > "$TEMP_FILE"
            mv "$TEMP_FILE" "$I"
          done
          make fmt build
      - uses: actions/upload-artifact@v2
        with:
          name: pb-commit-msg-${{ matrix.target }}
          path: ./target/release/pb-commit-msg${{ matrix.suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: pb-git-hooks-${{ matrix.target }}
          path: ./target/release/pb-git-hooks${{ matrix.suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: pb-pre-commit-${{ matrix.target }}
          path: ./target/release/pb-pre-commit${{ matrix.suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: pb-prepare-commit-msg-${{ matrix.target }}
          path: ./target/release/pb-prepare-commit-msg${{ matrix.suffix }}
      - uses: actions/upload-artifact@v2
        with:
          name: git-authors-${{ matrix.target }}
          path: ./target/release/git-authors${{ matrix.suffix }}
  release:
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - id: get_repository_name
        run: echo ::set-output name=REPOSITORY_NAME::$(echo "$GITHUB_REPOSITORY" | awk -F / '{print $2}' | sed -e "s/:refs//")
        shell: bash
      - uses: actions/download-artifact@v2
      - id: get_version
        run: 'echo ::set-output name=VERSION::$(cat ./version/version)'
        shell: bash
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          components: 'rustfmt, clippy'
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: install
          args: 'toml-cli'
      - run: |
          for I in ./*/Cargo.toml ; do
            TEMP_FILE="$(mktemp)"
            toml set "$I" package.version "${VERSION:1}" > "$TEMP_FILE"
            mv "$TEMP_FILE" "$I"
          done
          make fmt build

          git config user.name 'GitHub Action[bot]'
          git config user.email 'actions@github.com'
          git commit --all --message="Creating Release '$VERSION'"
          git push
        shell: bash
        env:
          VERSION: '${{ steps.get_version.outputs.VERSION }}'
      - uses: actions/download-artifact@v2
      - id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: '${{ secrets.COMMITTER_TOKEN }}'
        with:
          tag_name: '${{ steps.get_version.outputs.VERSION }}'
          release_name: 'Release ${{ steps.get_version.outputs.VERSION }}'
          draft: false
          prerelease: false
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-pre-commit-x86_64-unknown-linux-gnu/pb-pre-commit
          asset_name: pb-pre-commit-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-prepare-commit-msg-x86_64-unknown-linux-gnu/pb-prepare-commit-msg
          asset_name: pb-prepare-commit-msg-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-commit-msg-x86_64-unknown-linux-gnu/pb-commit-msg
          asset_name: pb-commit-msg-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-git-hooks-x86_64-unknown-linux-gnu/pb-git-hooks
          asset_name: pb-git-hooks-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./git-authors-x86_64-unknown-linux-gnu/git-authors
          asset_name: git-authors-x86_64-unknown-linux-gnu
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-pre-commit-x86_64-apple-darwin/pb-pre-commit
          asset_name: pb-pre-commit-x86_64-apple-darwin
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-prepare-commit-msg-x86_64-apple-darwin/pb-prepare-commit-msg
          asset_name: pb-prepare-commit-msg-x86_64-apple-darwin
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-commit-msg-x86_64-apple-darwin/pb-commit-msg
          asset_name: pb-commit-msg-x86_64-apple-darwin
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./pb-git-hooks-x86_64-apple-darwin/pb-git-hooks
          asset_name: pb-git-hooks-x86_64-apple-darwin
          asset_content_type: application/octet-stream
      - uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
        with:
          upload_url: '${{ steps.create_release.outputs.upload_url }}'
          asset_path: ./git-authors-x86_64-apple-darwin/git-authors
          asset_name: git-authors-x86_64-apple-darwin
          asset_content_type: application/octet-stream
